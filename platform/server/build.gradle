plugins {
    id 'application'
    id 'distribution'
    id 'com.palantir.docker'
}

description = 'Trellis Triplestore Application'

application {
    mainClassName = 'org.trellisldp.app.triplestore.TrellisApplication'
    applicationName = 'trellis'
}

dependencies {
    implementation project(':trellis-dropwizard-triplestore')

    runtimeOnly "jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion"

    if (project.sourceCompatibility.isJava11Compatible()) {
        runtimeOnly "io.dropwizard:dropwizard-core:$dropwizardVersion"
        runtimeOnly "io.dropwizard:dropwizard-metrics:$dropwizardVersion"
        runtimeOnly "io.dropwizard:dropwizard-http2:$dropwizardVersion"

        runtimeOnly "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"
        runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
        runtimeOnly "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    }
}

docker {
    name "trellisldp/trellis:${project.version}"
    tags 'latest', 'develop'
    dockerfile file('src/docker/Dockerfile')
    files tasks.distTar.outputs, './src/docker/config.yml', './src/docker/command.sh'
    buildArgs([BUILD_VERSION: project.version])
    def gitLabels = ['git.url':'https://github.com/trellis-ldp/trellis']
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        def hash = stdout.toString('UTF-8').trim()
        if (!hash.isEmpty()) {
            gitLabels.put('git.commit', hash)
        }
    } catch (all) { }
    labels(gitLabels)
    pull false
    noCache false
}

signing {
    sign distTar
    sign distZip
}

task copyDistTask(type: Copy) {
    from '../LICENSE'
    from 'README.md'
    into 'src/dist'
}

assembleDist {
    dependsOn copyDistTask
}

gradle.taskGraph.whenReady({ graph ->
    tasks.withType(AbstractArchiveTask).each { archive ->
        archive.doLast {
            ant.checksum file: archive.archiveFile.get(), algorithm: 'sha-256', format: 'MD5SUM', fileext: '.sha256'
        }
    }
})

java {
    // because this isn't built as a JPMS module
    if (project.hasProperty("jpms") && JavaVersion.current().isJava11Compatible()) {
        disableAutoTargetJvm()
    }
}
